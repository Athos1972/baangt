First: In the TestSteps apart from the locatoryType should also be the locator - otherwise it won't work :)
Also there are new fields on this level: Optional (boolean), Timeout (dec 5,2), Release (string), value2 (String), comparison (string). You can see the fields for instance in SimpleTheInternet.xlsx. I guess that shouldn't be a big problem :)
The assignment of elements to other elements though is not ideal. Think of a bank with 100 systems, 1000 Testruns and 100.000 Teststeps. As I see the assignment from one level to the next is simply by clicking on a (full) list of elements of the lower level. I think this needs another idea :)
About testing the functionality: There is a repository baangt-Docker that uses VNC and has all necessary dependencies installed (Firefox, Geckodriver, etc.). This should be a good base for testing. 
anyway. About interfacing the database with the testrun: In the same way as now in TestRun.py
called from __init__ there are methods _loadJSONTestRunDefinition and _loadExcelTestRunDefinition. Either you export the structures below a given testrun from the database into JSON-format, that can be read by this method OR we make a new method like _loadDbTestRunDefinition where the DB-Structures are filled into Dict.



update 03/02/2020
We’ll need a cascade delete functionality though. When a parent-object is deleted, ask “Delete all child objects?” and if yes, delete all child objects, that aren’t used in other parents. That’s a quick fix. Ultimately we’ll need kind of “Update from XLSX” in TestRun.

The idea is as follows:

-) Business department creates a test case (by recording Web-Interactions using recorder and then using Baangt importer to create simpleFormat XLSX from the recording. This also creates data file structure.)
-) Business department fills in test data into the data file structure and tests with the test cases (baangt Interactive Starter or Baangt CLI)
-) Business department is happy with it and hands over to IT-Department (via XLSX)
-) IT-Department imports XLSX into baangtDB (the flask app)
-) IT-Department replaces common parts (e.g. Login) with existing objects (e.g. an existing TestStepSequence)
-) IT-Department runs it and is also happy
-) Sometime later something changes and IT-Department is not sure, what to do (“is it a bug or is it a feature?”)
-) they Export XLSX and send to business department (XLSX now has complex format)
-) Business department fixes the problem in the test case definition
-) Business department sends back the XLSX to IT-Department

In our current solution IT-Department will delete the TestRun and import the XLSX. That’s not ideal as all historic information is lost. Better (not for now – but somewhen in the future) would be to update/modify from the XSLX.

 
